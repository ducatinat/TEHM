Git


# Configure a proxy

git config --global http.proxy http://proxy:port
------------------------------------------------------------------------------------------------------------------------------------------------------

# Fork the main repo via the web browser.

# Clone your fork.
    git clone git@github.com:<username>/<forked repo>
    git clone git@github.com:leebaird/theHarvester.git

cd theHarvester/

# Add the upstream repo so that you can pull changes.
    git remote add upstream git@github.com:<original repo>
    git remote add upstream git@github.com:laramies/theHarvester.git

# Stop errors pushing changes.
    # Point this command to your fork.
    git remote set-url origin git@github.com:<username>/<fork>
    git remote set-url origin git@github.com:leebaird/theHarvester.git

# Validate connectivity
    ssh -T git@github.com
------------------------------------------------------------------------------------------------------------------------------------------------------

# Working on a dev branch

Always try to avoid working on the master branch.
It usually results in merge conflicts and/or update issues.
Instead, work on a bug/dev/feature branch whenever possible.

    # Start from the master branch.
    git checkout master

    # Create a new branch.
    git branch -b dev

    # Switch to the new branch.
    git checkout dev

    # Make changes in this branch.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Keep your fork updated

Once your fork has been created, it does not automatically track with the upstream repo.

    # Pull the latest changes from upstream.
    git fetch upstream
    git fetch upstream --tags

    # Make sure there are no un-committed changes.
    git stash

    # Make sure you are working on the master branch.
    git checkout master

    # Merge the latest changes.
    git merge upstream/master

    # Push the updates changes to our GitHub fork.
    git push origin master
    git push origin --tags

    # Return to your bug/feature branch.
    git checkout dev

    # Rebase this branch onto latest code from master (expect conflicts).
    git rebase master

    # Resolve conflicts.

    # Push the rebased branch back to your fork.
    git push origin dev -f

    # Restore any un-committed changes.
    git stash pop

NOTE: The git stash steps are optional. It is easier if you commit all changes before
attempting a rebase.

NOTE: If you are working on a branch from your fork and you are wanting to support
    different OSes as an example. You will want to set this up so you can pull the
    updates from that branch on both systems.

    git branch --set-upstream-to <branch name> origin/<branch name>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Submitting a patch

Once your code is ready to be submitted, you will need to submit a pull request with
your changes.

    Update your branch and make sure you are rebased off the latest upstream/master.
    Squash your commits onto a single revision.
    Submit a pull request on GitHub.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Squashing your changes into one revision

Before you can submit a pull request, rebase all your changes onto a single commit.
This makes it easier to review, and also makes reverting the code easier in case of
any build breakages.

    git rebase -i master
    #... squash commits ...
------------------------------------------------------------------------------------------------------------------------------------------------------

# Deleting local and remote branches

    # Local
    git branch -D <branchname>

    # Remote
    git push origin --delete <branchname>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Creating a branch and checkout at the same time

To create a branch and switch to it at the same time, you can run the git checkout
command with the -b switch.

    git checkout -b iss53
    Switched to a new branch 'iss53'
------------------------------------------------------------------------------------------------------------------------------------------------------

# Testing pull requests locally

    # Make sure you are on the master branch of your fork.
    git fetch upstream pull/ID/head:BRANCHNAME

    # Change to branch that you want to test.
    git checkout BRANCHNAME
------------------------------------------------------------------------------------------------------------------------------------------------------

# Forensics/CTF

git log                     Show logs
git ls-tree <commit ID>     Indented listing of the file
git show <file ID>          Look for comments

